{
    "name": "sha2_256",
    "description": "description",
    "url": "url",
    "input_description": "input_description",
    "type": "placeholder-zkllvm",
    "isPrivate": true,
    "definition": {
        "verification_key": "verification_key",
        "proving_key": "; ModuleID = '~/Projects/crypto/zkllvm/zkllvm/examples/cpp/sha2_256.cpp'\nsource_filename = \"~/Projects/crypto/zkllvm/zkllvm/examples/cpp/sha2_256.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"assigner\"\n\n%\"struct.nil::crypto3::hashes::sha2<256>::process\" = type { i8 }\n\n$_ZN3nil7crypto34hashINS0_6hashes4sha2ILm256EEEEENT_10block_typeES6_S6_ = comdat any\n\n$_ZN3nil7crypto36hashes4sha2ILm256EE7processclEDv2_u26__zkllvm_field_pallas_baseS5_ = comdat any\n\n$_ZN3nil7crypto37algebra6fields17pallas_base_field12modulus_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields17pallas_base_field11number_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields17pallas_base_field10value_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields16vesta_base_field12modulus_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields16vesta_base_field11number_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields16vesta_base_field10value_bitsE = comdat any\n\n@_ZZN3nil7crypto314multiprecision8backends11window_bitsEmE5wsize = internal unnamed_addr constant [6 x [2 x i64]] [[2 x i64] [i64 1434, i64 7], [2 x i64] [i64 539, i64 6], [2 x i64] [i64 197, i64 4], [2 x i64] [i64 70, i64 3], [2 x i64] [i64 17, i64 2], [2 x i64] zeroinitializer], align 8\n@_ZN3nil7crypto37algebra6fields17pallas_base_field12modulus_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields17pallas_base_field11number_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields17pallas_base_field10value_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields16vesta_base_field12modulus_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields16vesta_base_field11number_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields16vesta_base_field10value_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n\n; Function Attrs: mustprogress nounwind\ndefine dso_local void @free(i8* noundef %0) local_unnamed_addr #0 {\n  tail call void @llvm.assigner.free(i8* %0)\n  ret void\n}\n\n; Function Attrs: nounwind\ndeclare void @llvm.assigner.free(i8*) #1\n\n; Function Attrs: mustprogress nounwind allocsize(0)\ndefine dso_local i8* @malloc(i64 noundef %0) local_unnamed_addr #2 {\n  %2 = tail call i8* @llvm.assigner.malloc(i64 %0)\n  ret i8* %2\n}\n\n; Function Attrs: nounwind\ndeclare i8* @llvm.assigner.malloc(i64) #1\n\n; Function Attrs: mustprogress nounwind\ndefine dso_local noundef i64 @_ZN3nil7crypto314multiprecision8backends11window_bitsEm(i64 noundef %0) local_unnamed_addr #0 {\n  br label %2\n\n2:                                                ; preds = %2, %1\n  %3 = phi i64 [ 5, %1 ], [ %8, %2 ]\n  %4 = getelementptr inbounds [6 x [2 x i64]], [6 x [2 x i64]]* @_ZZN3nil7crypto314multiprecision8backends11window_bitsEmE5wsize, i64 0, i64 %3\n  %5 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 0\n  %6 = load i64, i64* %5, align 8, !tbaa !3\n  %7 = icmp ugt i64 %6, %0\n  %8 = add i64 %3, -1\n  br i1 %7, label %2, label %9, !llvm.loop !7\n\n9:                                                ; preds = %2\n  %10 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 1\n  %11 = load i64, i64* %10, align 8, !tbaa !3\n  %12 = add i64 1, %11\n  ret i64 %12\n}\n\n; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3\n\n; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3\n\n; Function Attrs: circuit mustprogress\ndefine dso_local noundef <2 x __zkllvm_field_pallas_base> @_Z14sha256_exampleDv2_u26__zkllvm_field_pallas_baseS_(<2 x __zkllvm_field_pallas_base> noundef %0, <2 x __zkllvm_field_pallas_base> noundef %1) local_unnamed_addr #4 {\n  %3 = tail call noundef <2 x __zkllvm_field_pallas_base> @_ZN3nil7crypto34hashINS0_6hashes4sha2ILm256EEEEENT_10block_typeES6_S6_(<2 x __zkllvm_field_pallas_base> noundef %0, <2 x __zkllvm_field_pallas_base> noundef %1)\n  ret <2 x __zkllvm_field_pallas_base> %3\n}\n\n; Function Attrs: mustprogress\ndefine linkonce_odr dso_local noundef <2 x __zkllvm_field_pallas_base> @_ZN3nil7crypto34hashINS0_6hashes4sha2ILm256EEEEENT_10block_typeES6_S6_(<2 x __zkllvm_field_pallas_base> noundef %0, <2 x __zkllvm_field_pallas_base> noundef %1) local_unnamed_addr #5 comdat {\n  %3 = alloca %\"struct.nil::crypto3::hashes::sha2<256>::process\", align 1\n  %4 = bitcast %\"struct.nil::crypto3::hashes::sha2<256>::process\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* %4) #1\n  %5 = call noundef <2 x __zkllvm_field_pallas_base> @_ZN3nil7crypto36hashes4sha2ILm256EE7processclEDv2_u26__zkllvm_field_pallas_baseS5_(%\"struct.nil::crypto3::hashes::sha2<256>::process\"* noundef nonnull align 1 dereferenceable(1) %3, <2 x __zkllvm_field_pallas_base> noundef %0, <2 x __zkllvm_field_pallas_base> noundef %1)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* %4) #1\n  ret <2 x __zkllvm_field_pallas_base> %5\n}\n\n; Function Attrs: mustprogress nounwind\ndefine linkonce_odr dso_local noundef <2 x __zkllvm_field_pallas_base> @_ZN3nil7crypto36hashes4sha2ILm256EE7processclEDv2_u26__zkllvm_field_pallas_baseS5_(%\"struct.nil::crypto3::hashes::sha2<256>::process\"* noundef nonnull align 1 dereferenceable(1) %0, <2 x __zkllvm_field_pallas_base> noundef %1, <2 x __zkllvm_field_pallas_base> noundef %2) local_unnamed_addr #0 comdat align 2 {\n  %4 = tail call <2 x __zkllvm_field_pallas_base> @llvm.assigner.sha2.256.v2field(<2 x __zkllvm_field_pallas_base> %1, <2 x __zkllvm_field_pallas_base> %2)\n  ret <2 x __zkllvm_field_pallas_base> %4\n}\n\n; Function Attrs: nounwind\ndeclare <2 x __zkllvm_field_pallas_base> @llvm.assigner.sha2.256.v2field(<2 x __zkllvm_field_pallas_base>, <2 x __zkllvm_field_pallas_base>) #1\n\nattributes #0 = { mustprogress nounwind \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" }\nattributes #1 = { nounwind }\nattributes #2 = { mustprogress nounwind allocsize(0) \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" }\nattributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }\nattributes #4 = { circuit mustprogress \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" }\nattributes #5 = { mustprogress \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" }\n\n!llvm.linker.options = !{}\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"frame-pointer\", i32 2}\n!2 = !{!\"clang version 16.0.0 (git@github.com:NilFoundation/zkllvm-circifier.git c67458ea4d9f80a9bf61a37ccbef9b60ed11575a)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"long\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = distinct !{!7, !8, !9}\n!8 = !{!\"llvm.loop.mustprogress\"}\n!9 = !{!\"llvm.loop.unroll.disable\"}\n"
    }
}